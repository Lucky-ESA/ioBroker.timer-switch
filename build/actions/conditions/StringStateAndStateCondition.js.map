{
  "version": 3,
  "sources": ["../../../src/actions/conditions/StringStateAndStateCondition.ts"],
  "sourcesContent": ["import { StateService } from \"../../services/StateService\";\nimport { Condition } from \"./Condition\";\nimport { EqualitySign } from \"./EqualitySign\";\n\nexport class StringStateAndStateCondition implements Condition {\n    private readonly stateId1: string;\n    private readonly stateId2: string;\n    private readonly stateService: StateService;\n    private readonly sign: EqualitySign;\n\n    constructor(stateId1: string, stateId2: string, sign: EqualitySign, stateService: StateService) {\n        if (stateId1 == null || stateId1.length === 0) {\n            throw new Error(\"First state id may not be null, undefined or empty.\");\n        }\n        if (stateId2 == null || stateId2.length === 0) {\n            throw new Error(\"Second state id may not be null, undefined or empty.\");\n        }\n        if (sign == null) {\n            throw new Error(\"Sign may not be null or undefined.\");\n        }\n        if (stateService == null) {\n            throw new Error(\"State service may not be null or undefined.\");\n        }\n        this.stateId1 = stateId1;\n        this.stateId2 = stateId2;\n        this.sign = sign;\n        this.stateService = stateService;\n    }\n\n    public async evaluate(): Promise<boolean> {\n        const firstStateValue = String(await this.stateService.getForeignState(this.stateId1));\n        const secondStateValue = String(await this.stateService.getForeignState(this.stateId2));\n        let result: boolean;\n        if (this.sign == EqualitySign.NotEqual) {\n            result = firstStateValue !== secondStateValue;\n        } else {\n            result = firstStateValue === secondStateValue;\n        }\n        return Promise.resolve(result);\n    }\n\n    public getStateId1(): string {\n        return this.stateId1;\n    }\n\n    public getStateId2(): string {\n        return this.stateId2;\n    }\n\n    public getSign(): EqualitySign {\n        return this.sign;\n    }\n\n    public toString(): string {\n        return `${this.stateId1} ${this.sign} ${this.stateId2}`;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,0BAA6B;AAEtB,MAAM,6BAAkD;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,UAAkB,UAAkB,MAAoB,cAA4B;AAC5F,QAAI,YAAY,QAAQ,SAAS,WAAW,GAAG;AAC3C,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACzE;AACA,QAAI,YAAY,QAAQ,SAAS,WAAW,GAAG;AAC3C,YAAM,IAAI,MAAM,sDAAsD;AAAA,IAC1E;AACA,QAAI,QAAQ,MAAM;AACd,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACxD;AACA,QAAI,gBAAgB,MAAM;AACtB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IACjE;AACA,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,eAAe;AAAA,EACxB;AAAA,EAEA,MAAa,WAA6B;AACtC,UAAM,kBAAkB,OAAO,MAAM,KAAK,aAAa,gBAAgB,KAAK,QAAQ,CAAC;AACrF,UAAM,mBAAmB,OAAO,MAAM,KAAK,aAAa,gBAAgB,KAAK,QAAQ,CAAC;AACtF,QAAI;AACJ,QAAI,KAAK,QAAQ,iCAAa,UAAU;AACpC,eAAS,oBAAoB;AAAA,IACjC,OAAO;AACH,eAAS,oBAAoB;AAAA,IACjC;AACA,WAAO,QAAQ,QAAQ,MAAM;AAAA,EACjC;AAAA,EAEO,cAAsB;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,cAAsB;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,UAAwB;AAC3B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,WAAmB;AACtB,WAAO,GAAG,KAAK,QAAQ,IAAI,KAAK,IAAI,IAAI,KAAK,QAAQ;AAAA,EACzD;AACJ;",
  "names": []
}
