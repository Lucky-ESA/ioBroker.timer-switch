{
  "version": 3,
  "sources": ["../../src/actions/OnOffStateAction.ts"],
  "sourcesContent": ["import { StateService } from \"../services/StateService\";\nimport { BaseStateAction } from \"./BaseStateAction\";\n\nexport class OnOffStateAction<T extends string | number | boolean> extends BaseStateAction {\n    private idsOfStatesToSet: string[];\n    private readonly onValue: T;\n    private readonly offValue: T;\n    private readonly booleanValue: boolean;\n\n    constructor(\n        idsOfStatesToSet: string[],\n        onValue: T,\n        offValue: T,\n        booleanValue: boolean,\n        stateService: StateService,\n    ) {\n        super(stateService);\n\n        this.checkIdsOfStates(idsOfStatesToSet);\n        if (onValue == undefined) {\n            throw new Error(\"OnValue may not be undefined.\");\n        }\n        if (offValue == undefined) {\n            throw new Error(\"OffValue may not be undefined.\");\n        }\n        if (booleanValue == null) {\n            throw new Error(\"ValueToSet may not be null or undefined.\");\n        }\n\n        this.idsOfStatesToSet = idsOfStatesToSet;\n        this.onValue = onValue;\n        this.offValue = offValue;\n        this.booleanValue = booleanValue;\n    }\n\n    public getIdsOfStatesToSet(): string[] {\n        return this.idsOfStatesToSet;\n    }\n\n    public setIdsOfStatesToSet(idsOfStatesToSet: string[]): void {\n        this.checkIdsOfStates(idsOfStatesToSet);\n        this.idsOfStatesToSet = idsOfStatesToSet;\n    }\n\n    public getOnValue(): T {\n        return this.onValue;\n    }\n\n    public getOffValue(): T {\n        return this.offValue;\n    }\n\n    public getBooleanValue(): boolean {\n        return this.booleanValue;\n    }\n\n    public execute(): void {\n        const valueToUse = this.getBooleanValue() ? this.getOnValue() : this.getOffValue();\n        this.getIdsOfStatesToSet().forEach((id) => {\n            this.getStateService().setForeignState(id, valueToUse);\n        });\n    }\n\n    public toBooleanValueType(): OnOffStateAction<boolean> {\n        return new OnOffStateAction(\n            this.getIdsOfStatesToSet(),\n            true,\n            false,\n            this.getBooleanValue(),\n            this.getStateService(),\n        );\n    }\n\n    public toStringValueType(onValue: string, offValue: string): OnOffStateAction<string> {\n        return new OnOffStateAction(\n            this.getIdsOfStatesToSet(),\n            onValue,\n            offValue,\n            this.getBooleanValue(),\n            this.getStateService(),\n        );\n    }\n\n    public toNumberValueType(onValue: number, offValue: number): OnOffStateAction<number> {\n        return new OnOffStateAction(\n            this.getIdsOfStatesToSet(),\n            onValue,\n            offValue,\n            this.getBooleanValue(),\n            this.getStateService(),\n        );\n    }\n\n    private checkIdsOfStates(ids: string[]): void {\n        if (ids == null || ids.length == 0 || ids.includes(\"\")) {\n            throw new Error(\"IdsOfStatesToSet may not be null or empty.\");\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,6BAAgC;AAEzB,MAAM,yBAA8D,uCAAgB;AAAA,EAC/E;AAAA,EACS;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YACI,kBACA,SACA,UACA,cACA,cACF;AACE,UAAM,YAAY;AAElB,SAAK,iBAAiB,gBAAgB;AACtC,QAAI,WAAW,QAAW;AACtB,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACnD;AACA,QAAI,YAAY,QAAW;AACvB,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD;AACA,QAAI,gBAAgB,MAAM;AACtB,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC9D;AAEA,SAAK,mBAAmB;AACxB,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,eAAe;AAAA,EACxB;AAAA,EAEO,sBAAgC;AACnC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,oBAAoB,kBAAkC;AACzD,SAAK,iBAAiB,gBAAgB;AACtC,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEO,aAAgB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,cAAiB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,kBAA2B;AAC9B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,UAAgB;AACnB,UAAM,aAAa,KAAK,gBAAgB,IAAI,KAAK,WAAW,IAAI,KAAK,YAAY;AACjF,SAAK,oBAAoB,EAAE,QAAQ,CAAC,OAAO;AACvC,WAAK,gBAAgB,EAAE,gBAAgB,IAAI,UAAU;AAAA,IACzD,CAAC;AAAA,EACL;AAAA,EAEO,qBAAgD;AACnD,WAAO,IAAI;AAAA,MACP,KAAK,oBAAoB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,KAAK,gBAAgB;AAAA,MACrB,KAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EAEO,kBAAkB,SAAiB,UAA4C;AAClF,WAAO,IAAI;AAAA,MACP,KAAK,oBAAoB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,KAAK,gBAAgB;AAAA,MACrB,KAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EAEO,kBAAkB,SAAiB,UAA4C;AAClF,WAAO,IAAI;AAAA,MACP,KAAK,oBAAoB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,KAAK,gBAAgB;AAAA,MACrB,KAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EAEQ,iBAAiB,KAAqB;AAC1C,QAAI,OAAO,QAAQ,IAAI,UAAU,KAAK,IAAI,SAAS,EAAE,GAAG;AACpD,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAChE;AAAA,EACJ;AACJ;",
  "names": []
}
