{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { cancelJob, scheduleJob } from \"node-schedule\";\nimport { getTimes } from \"suncalc\";\nimport { Action } from \"./actions/Action\";\nimport { Condition } from \"./actions/conditions/Condition\";\nimport { Coordinate } from \"./Coordinate\";\nimport { AstroTriggerScheduler } from \"./scheduler/AstroTriggerScheduler\";\nimport { TimeTriggerScheduler } from \"./scheduler/TimeTriggerScheduler\";\nimport { UniversalTriggerScheduler } from \"./scheduler/UniversalTriggerScheduler\";\nimport { Schedule } from \"./schedules/Schedule\";\nimport { AstroTriggerSerializer } from \"./serialization/AstroTriggerSerializer\";\nimport { ConditionActionSerializer } from \"./serialization/ConditionActionSerializer\";\nimport { StringStateAndConstantConditionSerializer } from \"./serialization/conditions/StringStateAndConstantConditionSerializer\";\nimport { StringStateAndStateConditionSerializer } from \"./serialization/conditions/StringStateAndStateConditionSerializer\";\nimport { OnOffScheduleSerializer } from \"./serialization/OnOffScheduleSerializer\";\nimport { OnOffStateActionSerializer } from \"./serialization/OnOffStateActionSerializer\";\nimport { TimeTriggerSerializer } from \"./serialization/TimeTriggerSerializer\";\nimport { UniversalSerializer } from \"./serialization/UniversalSerializer\";\nimport { IoBrokerLoggingService } from \"./services/IoBrokerLoggingService\";\nimport { IoBrokerStateService } from \"./services/IoBrokerStateService\";\nimport { MessageService } from \"./services/MessageService\";\nimport { Trigger } from \"./triggers/Trigger\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nexport class TimerSwitch extends utils.Adapter {\n    private scheduleIdToSchedule: Map<string, Schedule> = new Map<string, Schedule>();\n    private loggingService = new IoBrokerLoggingService(this);\n    private stateService = new IoBrokerStateService(this, this.loggingService);\n    private coordinate: Coordinate | undefined;\n    private messageService: MessageService | undefined;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"timer-switch\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    public static getEnabledIdFromScheduleId(scheduleId: string): string {\n        return scheduleId.replace(\"data\", \"enabled\");\n    }\n\n    public static getScheduleIdFromEnabledId(scheduleId: string): string {\n        return scheduleId.replace(\"enabled\", \"data\");\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        await this.initMessageService();\n        await this.fixStateStructure(this.config.schedules);\n        const record = await this.getStatesAsync(`timer-switch.${this.instance}.*.data`);\n        for (const id in record) {\n            const state = record[id];\n            this.log.debug(`got state: ${state ? JSON.stringify(state) : \"null\"} with id: ${id}`);\n            if (state) {\n                this.log.info(\"ID: \" + id);\n                this.onScheduleChange(id, state.val as string);\n            } else {\n                this.log.error(`Could not retrieve state for ${id}`);\n            }\n        }\n        //this.subscribeStates(`timer-switch.${this.instance}.*`);\n        this.subscribeStates(`*`);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        this.log.info(\"cleaning everything up...\");\n        for (const id in this.scheduleIdToSchedule.keys()) {\n            try {\n                this.scheduleIdToSchedule.get(id)?.destroy();\n            } catch (e) {\n                this.logError(e as Error);\n            }\n        }\n        try {\n            this.scheduleIdToSchedule.clear();\n        } catch (e) {\n            this.logError(e as Error);\n        } finally {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            if (!state.ack) {\n                const command = id.split(\".\").pop();\n                if (command === \"data\") {\n                    this.log.debug(\"is schedule id start\");\n                    await this.onScheduleChange(id, state.val as string);\n                    this.log.debug(\"is schedule id end\");\n                } else if (command === \"enabled\") {\n                    this.log.debug(\"is enabled id start\");\n                    const dataId = TimerSwitch.getScheduleIdFromEnabledId(id);\n                    const scheduleData = (await this.getStateAsync(dataId))?.val;\n                    await this.onScheduleChange(dataId, scheduleData as string);\n                    this.log.debug(\"is enabled id end\");\n                } else if (command === \"sendto\" && typeof state.val === \"string\") {\n                    this.log.debug(\"is sendto id\");\n                    this.setSendTo(state.val);\n                }\n                this.stateService.setState(id, state.val as string, true);\n            }\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === \"object\" && obj.message) {\n            try {\n                this.log.info(\"obj: \" + JSON.stringify(obj));\n                if (this.messageService) {\n                    await this.messageService.handleMessage(obj);\n                } else {\n                    this.log.error(\"Message service not initialized\");\n                }\n            } catch (e) {\n                this.logError(e as Error);\n                this.log.error(`Could not handle message:`);\n            }\n        }\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Private helper methods\n    //------------------------------------------------------------------------------------------------------------------\n\n    private async initMessageService(): Promise<void> {\n        this.messageService = new MessageService(\n            this.stateService,\n            this.loggingService,\n            this.scheduleIdToSchedule,\n            this.createNewOnOffScheduleSerializer.bind(this),\n        );\n    }\n\n    private async fixStateStructure(statesInSettings: { onOff: number[] }): Promise<void> {\n        if (!statesInSettings) {\n            statesInSettings = { onOff: [] };\n        }\n        if (!statesInSettings.onOff) {\n            statesInSettings.onOff = [];\n        }\n        const prefix = `timer-switch.${this.instance}.`;\n        const currentStates = await this.getStatesAsync(`${prefix}*.data`);\n        for (const fullId in currentStates) {\n            const split = fullId.split(\".\");\n            const type = split[2];\n            const id = Number.parseInt(split[3], 10);\n            if (type == \"onoff\") {\n                if (statesInSettings.onOff.includes(id)) {\n                    statesInSettings.onOff = statesInSettings.onOff.filter((i) => i !== id);\n                    this.log.debug(\"Found state \" + fullId);\n                } else {\n                    this.log.debug(\"Deleting state \" + fullId);\n                    await this.deleteOnOffSchedule(id);\n                }\n            }\n        }\n        for (const i of statesInSettings.onOff) {\n            this.log.debug(\"Onoff state \" + i + \" not found, creating\");\n            await this.createOnOffSchedule(i);\n        }\n    }\n\n    private async deleteOnOffSchedule(id: number): Promise<void> {\n        await this.delObjectAsync(`onoff.${id.toString()}`, { recursive: true });\n    }\n\n    private async createOnOffSchedule(id: number): Promise<void> {\n        await this.setObjectNotExistsAsync(\"onoff\", {\n            type: \"channel\",\n            common: {\n                name: \"onoff\",\n                desc: \"Created by Adapter\",\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(`onoff.${id.toString()}`, {\n            type: \"channel\",\n            common: {\n                name: id.toString(),\n                desc: \"Created by Adapter\",\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(`onoff.${id.toString()}.data`, {\n            type: \"state\",\n            common: {\n                name: \"data\",\n                read: true,\n                write: true,\n                type: \"string\",\n                role: \"json\",\n                def: `{\n                    \"type\": \"OnOffSchedule\",\n                    \"name\": \"New Schedule\",\n                    \"onAction\": {\n                        \"type\":\"OnOffStateAction\",\n                        \"valueType\":\"boolean\",\n                        \"onValue\":true,\n                        \"offValue\":false,\n                        \"booleanValue\":true,\n                        \"idsOfStatesToSet\":[\"default.state\"]\n                        },\n                    \"offAction\": {\n                        \"type\":\"OnOffStateAction\",\n                        \"valueType\":\"boolean\",\n                        \"onValue\":true,\n                        \"offValue\":false,\n                        \"booleanValue\":false,\n                        \"idsOfStatesToSet\":[\"default.state\"]\n                    },\n                    \"triggers\":[]\n                }`.replace(/\\s/g, \"\"),\n                desc: \"Contains the schedule data (triggers, etc.)\",\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(`onoff.${id.toString()}.enabled`, {\n            type: \"state\",\n            common: {\n                name: \"enabled\",\n                read: true,\n                write: true,\n                type: \"boolean\",\n                role: \"switch\",\n                def: false,\n                desc: \"Enables/disables automatic switching for this schedule\",\n            },\n            native: {},\n        });\n    }\n\n    private async onScheduleChange(id: string, scheduleString: string): Promise<void> {\n        this.log.debug(\"onScheduleChange: \" + scheduleString + \" \" + id);\n        if (this.scheduleIdToSchedule.get(id)) {\n            this.log.debug(\"schedule found: \" + this.scheduleIdToSchedule.get(id));\n        }\n\n        try {\n            const schedule = (await this.createNewOnOffScheduleSerializer()).deserialize(scheduleString);\n            const enabledState = await this.getStateAsync(TimerSwitch.getEnabledIdFromScheduleId(id));\n            if (enabledState) {\n                this.scheduleIdToSchedule.get(id)?.destroy();\n                schedule.setEnabled(enabledState.val as boolean);\n                this.scheduleIdToSchedule.set(id, schedule);\n            } else {\n                this.log.error(`Could not retrieve state enabled state for ${id}`);\n            }\n        } catch (e) {\n            this.logError(e as Error);\n        }\n    }\n\n    private async getCoordinate(): Promise<Coordinate> {\n        if (this.coordinate) {\n            return Promise.resolve(this.coordinate);\n        } else {\n            return new Promise((resolve, _) => {\n                this.getForeignObject(\"system.config\", (error, obj) => {\n                    if (obj && obj.common) {\n                        const lat = (obj.common as any).latitude;\n                        const long = (obj.common as any).longitude;\n                        if (lat && long) {\n                            this.log.debug(`Got coordinates lat=${lat} long=${long}`);\n                            resolve(new Coordinate(lat, long));\n                            return;\n                        }\n                    }\n                    this.log.error(\n                        \"Could not read coordinates from system.config, using Berlins coordinates as fallback\",\n                    );\n                    resolve(new Coordinate(52, 13));\n                });\n            });\n        }\n    }\n\n    private logError(error: Error): void {\n        this.log.error(error.stack || `${error.name}: ${error.message}`);\n    }\n\n    private async createNewOnOffScheduleSerializer(): Promise<OnOffScheduleSerializer> {\n        const actionSerializer = new UniversalSerializer<Action>([new OnOffStateActionSerializer(this.stateService)]);\n        actionSerializer.useSerializer(\n            new ConditionActionSerializer(\n                new UniversalSerializer<Condition>([\n                    new StringStateAndConstantConditionSerializer(this.stateService),\n                    new StringStateAndStateConditionSerializer(this.stateService),\n                ]),\n                actionSerializer,\n                this.loggingService,\n            ),\n        );\n        const triggerSerializer = new UniversalSerializer<Trigger>([\n            new TimeTriggerSerializer(actionSerializer),\n            new AstroTriggerSerializer(actionSerializer),\n        ]);\n        return new OnOffScheduleSerializer(\n            new UniversalTriggerScheduler([\n                new TimeTriggerScheduler(scheduleJob, cancelJob, this.loggingService),\n                new AstroTriggerScheduler(\n                    new TimeTriggerScheduler(scheduleJob, cancelJob, this.loggingService),\n                    getTimes,\n                    await this.getCoordinate(),\n                    this.loggingService,\n                ),\n            ]),\n            actionSerializer,\n            triggerSerializer,\n        );\n    }\n\n    /**\n     * Is called when vis-2 receives a message.\n     */\n    private async setSendTo(data: string): Promise<void> {\n        const send = JSON.parse(data);\n        this.log.info(JSON.stringify(send));\n        try {\n            if (this.messageService) {\n                await this.messageService.handleMessage(send);\n            } else {\n                this.log.error(\"Message service not initialized\");\n            }\n        } catch (e) {\n            this.logError(e as Error);\n            this.log.error(`Could not handle message:`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new TimerSwitch(options);\n} else {\n    // otherwise start the instance directly\n    (() => new TimerSwitch())();\n}\n"],
  "mappings": "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",
  "names": []
}
