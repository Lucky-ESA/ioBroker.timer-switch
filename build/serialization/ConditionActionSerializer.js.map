{
  "version": 3,
  "sources": ["../../src/serialization/ConditionActionSerializer.ts"],
  "sourcesContent": ["import { Action } from \"../actions/Action\";\nimport { ConditionAction } from \"../actions/ConditionAction\";\nimport { Condition } from \"../actions/conditions/Condition\";\nimport { LoggingService } from \"../services/LoggingService\";\nimport { Serializer } from \"./Serializer\";\nimport { UniversalSerializer } from \"./UniversalSerializer\";\n\nexport class ConditionActionSerializer implements Serializer<Action> {\n    constructor(\n        private conditionSerializer: UniversalSerializer<Condition>,\n        private actionSerializer: UniversalSerializer<Action>,\n        private logger?: LoggingService,\n    ) {}\n\n    deserialize(stringToDeserialize: string): Action {\n        const json = JSON.parse(stringToDeserialize);\n        if (json.type !== this.getType()) {\n            throw new Error(`Can not deserialize object of type ${json.type}`);\n        }\n        return new ConditionAction(\n            this.conditionSerializer.deserialize(JSON.stringify(json.condition)),\n            this.actionSerializer.deserialize(JSON.stringify(json.action)),\n            this.logger,\n        );\n    }\n\n    serialize(objectToSerialize: Action): string {\n        if (objectToSerialize == null) {\n            throw new Error(\"objectToSerialize may not be null or undefined.\");\n        }\n        if (objectToSerialize instanceof ConditionAction) {\n            return JSON.stringify({\n                type: this.getType(),\n                condition: JSON.parse(this.conditionSerializer.serialize(objectToSerialize.getCondition())),\n                action: JSON.parse(this.actionSerializer.serialize(objectToSerialize.getAction())),\n            });\n        } else {\n            throw new Error(\"objectToSerialize must be of type ConditionAction.\");\n        }\n    }\n\n    public getType(): string {\n        return ConditionAction.prototype.constructor.name;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,6BAAgC;AAMzB,MAAM,0BAAwD;AAAA,EACjE,YACY,qBACA,kBACA,QACV;AAHU;AACA;AACA;AAAA,EACT;AAAA,EAEH,YAAY,qBAAqC;AAC7C,UAAM,OAAO,KAAK,MAAM,mBAAmB;AAC3C,QAAI,KAAK,SAAS,KAAK,QAAQ,GAAG;AAC9B,YAAM,IAAI,MAAM,sCAAsC,KAAK,IAAI,EAAE;AAAA,IACrE;AACA,WAAO,IAAI;AAAA,MACP,KAAK,oBAAoB,YAAY,KAAK,UAAU,KAAK,SAAS,CAAC;AAAA,MACnE,KAAK,iBAAiB,YAAY,KAAK,UAAU,KAAK,MAAM,CAAC;AAAA,MAC7D,KAAK;AAAA,IACT;AAAA,EACJ;AAAA,EAEA,UAAU,mBAAmC;AACzC,QAAI,qBAAqB,MAAM;AAC3B,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACrE;AACA,QAAI,6BAA6B,wCAAiB;AAC9C,aAAO,KAAK,UAAU;AAAA,QAClB,MAAM,KAAK,QAAQ;AAAA,QACnB,WAAW,KAAK,MAAM,KAAK,oBAAoB,UAAU,kBAAkB,aAAa,CAAC,CAAC;AAAA,QAC1F,QAAQ,KAAK,MAAM,KAAK,iBAAiB,UAAU,kBAAkB,UAAU,CAAC,CAAC;AAAA,MACrF,CAAC;AAAA,IACL,OAAO;AACH,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACxE;AAAA,EACJ;AAAA,EAEO,UAAkB;AACrB,WAAO,uCAAgB,UAAU,YAAY;AAAA,EACjD;AACJ;",
  "names": []
}
