{
  "version": 3,
  "sources": ["../../../src/serialization/conditions/StringStateAndStateConditionSerializer.ts"],
  "sourcesContent": ["import { Condition } from \"../../actions/conditions/Condition\";\nimport { EqualitySign } from \"../../actions/conditions/EqualitySign\";\nimport { StringStateAndStateCondition } from \"../../actions/conditions/StringStateAndStateCondition\";\nimport { StateService } from \"../../services/StateService\";\nimport { Serializer } from \"../Serializer\";\n\nexport class StringStateAndStateConditionSerializer implements Serializer<Condition> {\n    constructor(private stateService: StateService) {}\n\n    deserialize(stringToDeserialize: string): Condition {\n        const json = JSON.parse(stringToDeserialize);\n        if (json.type !== this.getType()) {\n            throw new Error(`Can not deserialize object of type ${json.type}`);\n        }\n        if (!Object.values(EqualitySign).includes(json.sign)) {\n            throw new Error(`Equality sign ${json.sign} unknown`);\n        }\n        return new StringStateAndStateCondition(json.stateId1, json.stateId2, json.sign, this.stateService);\n    }\n\n    serialize(objectToSerialize: Condition): string {\n        if (objectToSerialize == null) {\n            throw new Error(\"objectToSerialize may not be null or undefined.\");\n        }\n        if (objectToSerialize instanceof StringStateAndStateCondition) {\n            return JSON.stringify({\n                type: this.getType(),\n                stateId1: objectToSerialize.getStateId1(),\n                stateId2: objectToSerialize.getStateId2(),\n                sign: objectToSerialize.getSign(),\n            });\n        } else {\n            throw new Error(\"objectToSerialize must be of type StringStateAndStateCondition .\");\n        }\n    }\n\n    getType(): string {\n        return StringStateAndStateCondition.prototype.constructor.name;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAA6B;AAC7B,0CAA6C;AAItC,MAAM,uCAAwE;AAAA,EACjF,YAAoB,cAA4B;AAA5B;AAAA,EAA6B;AAAA,EAEjD,YAAY,qBAAwC;AAChD,UAAM,OAAO,KAAK,MAAM,mBAAmB;AAC3C,QAAI,KAAK,SAAS,KAAK,QAAQ,GAAG;AAC9B,YAAM,IAAI,MAAM,sCAAsC,KAAK,IAAI,EAAE;AAAA,IACrE;AACA,QAAI,CAAC,OAAO,OAAO,gCAAY,EAAE,SAAS,KAAK,IAAI,GAAG;AAClD,YAAM,IAAI,MAAM,iBAAiB,KAAK,IAAI,UAAU;AAAA,IACxD;AACA,WAAO,IAAI,iEAA6B,KAAK,UAAU,KAAK,UAAU,KAAK,MAAM,KAAK,YAAY;AAAA,EACtG;AAAA,EAEA,UAAU,mBAAsC;AAC5C,QAAI,qBAAqB,MAAM;AAC3B,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACrE;AACA,QAAI,6BAA6B,kEAA8B;AAC3D,aAAO,KAAK,UAAU;AAAA,QAClB,MAAM,KAAK,QAAQ;AAAA,QACnB,UAAU,kBAAkB,YAAY;AAAA,QACxC,UAAU,kBAAkB,YAAY;AAAA,QACxC,MAAM,kBAAkB,QAAQ;AAAA,MACpC,CAAC;AAAA,IACL,OAAO;AACH,YAAM,IAAI,MAAM,kEAAkE;AAAA,IACtF;AAAA,EACJ;AAAA,EAEA,UAAkB;AACd,WAAO,iEAA6B,UAAU,YAAY;AAAA,EAC9D;AACJ;",
  "names": []
}
