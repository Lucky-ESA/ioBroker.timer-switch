{
  "version": 3,
  "sources": ["../../src/services/MessageService.ts"],
  "sourcesContent": ["import { OnOffStateAction } from \"../actions/OnOffStateAction\";\nimport { TimerSwitch } from \"../main\";\nimport { OnOffSchedule } from \"../schedules/OnOffSchedule\";\nimport { Schedule } from \"../schedules/Schedule\";\nimport { OnOffScheduleSerializer } from \"../serialization/OnOffScheduleSerializer\";\nimport { AstroTime } from \"../triggers/AstroTime\";\nimport { AstroTriggerBuilder } from \"../triggers/AstroTriggerBuilder\";\nimport { DailyTriggerBuilder } from \"../triggers/DailyTriggerBuilder\";\nimport { TimeTriggerBuilder } from \"../triggers/TimeTriggerBuilder\";\nimport { Trigger } from \"../triggers/Trigger\";\nimport { AllWeekdays } from \"../triggers/Weekday\";\nimport { LoggingService } from \"./LoggingService\";\nimport { StateService } from \"./StateService\";\n\nexport class MessageService {\n    private currentMessage: ioBroker.Message | null = null;\n\n    constructor(\n        private stateService: StateService,\n        private logger: LoggingService,\n        private scheduleIdToSchedule: Map<string, Schedule>,\n        private createOnOffScheduleSerializer: (dataId: string) => Promise<OnOffScheduleSerializer>,\n    ) {}\n\n    public async handleMessage(message: ioBroker.Message): Promise<void> {\n        if (this.currentMessage) {\n            setTimeout(() => this.handleMessage(message), 50);\n            return;\n        }\n        this.currentMessage = message;\n        const data: any = message.message;\n        this.logger.logDebug(`Received ${message.command}`);\n        this.logger.logDebug(JSON.stringify(message.message));\n        const schedule = this.scheduleIdToSchedule.get(data.dataId);\n        if (!schedule) {\n            throw new Error(\"No schedule found for state \" + data.dataId);\n        }\n        switch (message.command) {\n            case \"add-trigger\":\n                await this.addTrigger(schedule, data);\n                break;\n            case \"update-trigger\":\n                await this.updateTrigger(schedule, JSON.stringify(data.trigger), data.dataId);\n                break;\n            case \"delete-trigger\":\n                schedule.removeTrigger(data.triggerId);\n                break;\n            case \"change-name\":\n                schedule.setName(data.name);\n                break;\n            case \"enable-schedule\":\n                schedule.setEnabled(true);\n                await this.stateService.setState(TimerSwitch.getEnabledIdFromScheduleId(data.dataId), true);\n                break;\n            case \"disable-schedule\":\n                schedule.setEnabled(false);\n                await this.stateService.setState(TimerSwitch.getEnabledIdFromScheduleId(data.dataId), false);\n                break;\n            case \"change-switched-values\":\n                this.changeOnOffSchedulesSwitchedValues(schedule, data);\n                break;\n            case \"change-switched-ids\":\n                this.changeOnOffSchedulesSwitchedIds(schedule, data.stateIds);\n                break;\n            default:\n                throw new Error(\"Unknown command received\");\n        }\n        if (schedule instanceof OnOffSchedule) {\n            await this.stateService.setState(\n                data.dataId,\n                (await this.createOnOffScheduleSerializer(data.dataId)).serialize(schedule),\n            );\n        } else {\n            throw new Error(\"Cannot update schedule state after message, no serializer found for schedule\");\n        }\n        this.logger.logDebug(\"Finished message \" + message.command);\n        this.currentMessage = null;\n    }\n\n    private addTrigger(schedule: Schedule, data: any): void {\n        let triggerBuilder: DailyTriggerBuilder;\n\n        if (data.triggerType === \"TimeTrigger\") {\n            this.logger.logDebug(\"Wants TimeTrigger\");\n            triggerBuilder = new TimeTriggerBuilder().setHour(0).setMinute(0);\n        } else if (data.triggerType === \"AstroTrigger\") {\n            this.logger.logDebug(\"Wants AstroTrigger\");\n            triggerBuilder = new AstroTriggerBuilder().setAstroTime(AstroTime.Sunrise).setShift(0);\n        } else {\n            throw new Error(`Cannot add trigger of type ${data.triggerType}`);\n        }\n\n        triggerBuilder.setWeekdays(AllWeekdays).setId(this.getNextTriggerId(schedule.getTriggers()));\n\n        if (data.actionType === \"OnOffStateAction\" && schedule instanceof OnOffSchedule) {\n            this.logger.logDebug(\"Wants OnOffStateAction\");\n            triggerBuilder.setAction(schedule.getOnAction());\n        } else {\n            throw new Error(`Cannot add trigger with action of type ${data.actionType}`);\n        }\n        schedule.addTrigger(triggerBuilder.build());\n    }\n\n    private async addOneTimeTrigger(schedule: Schedule, data: any): Promise<void> {\n        const t = JSON.parse(data.trigger);\n        t.id = this.getNextTriggerId(schedule.getTriggers());\n        const trigger = (await this.createOnOffScheduleSerializer(data.dataId))\n            .getTriggerSerializer(schedule as OnOffSchedule)\n            .deserialize(JSON.stringify(t));\n        schedule.addTrigger(trigger);\n    }\n\n    private async updateTrigger(schedule: Schedule, triggerString: string, dataId: string): Promise<void> {\n        let updated;\n        if (schedule instanceof OnOffSchedule) {\n            updated = (await this.createOnOffScheduleSerializer(dataId))\n                .getTriggerSerializer(schedule)\n                .deserialize(triggerString);\n        } else {\n            throw new Error(`Can not deserialize trigger for schedule of type ${typeof schedule}`);\n        }\n        schedule.updateTrigger(updated);\n    }\n\n    private changeOnOffSchedulesSwitchedValues(schedule: Schedule, data: any): void {\n        if (!(schedule instanceof OnOffSchedule)) {\n            throw new Error(\"Cannot change switched values when schedule type is not OnOffSchedule\");\n        }\n        schedule.setOnAction(this.changeSwitchedValueOfOnOffScheduleAction(schedule.getOnAction(), data));\n        schedule.setOffAction(this.changeSwitchedValueOfOnOffScheduleAction(schedule.getOffAction(), data));\n    }\n\n    private changeOnOffSchedulesSwitchedIds(schedule: Schedule, stateIds: string[]): void {\n        if (!(schedule instanceof OnOffSchedule)) {\n            throw new Error(\"Cannot change switched ids when schedule type is not OnOffSchedule\");\n        }\n        schedule.getOnAction().setIdsOfStatesToSet(stateIds);\n        schedule.getOffAction().setIdsOfStatesToSet(stateIds);\n    }\n\n    private changeSwitchedValueOfOnOffScheduleAction(\n        action: OnOffStateAction<string | number | boolean>,\n        data: any,\n    ): OnOffStateAction<string | number | boolean> {\n        switch (data.valueType) {\n            case \"boolean\":\n                return action.toBooleanValueType();\n                break;\n            case \"number\":\n                return action.toNumberValueType(data.onValue, data.offValue);\n                break;\n            case \"string\":\n                return action.toStringValueType(data.onValue, data.offValue);\n                break;\n            default:\n                throw new Error(`Value Type ${data.valueType} not supported`);\n        }\n    }\n\n    private getNextTriggerId(current: Trigger[]): string {\n        const numbers = current\n            .map((t) => t.getId())\n            .map((id) => Number.parseInt(id, 10))\n            .filter((id) => !Number.isNaN(id))\n            .sort((a, b) => a - b);\n        let newId = 0;\n        for (let i = 0; i < numbers.length; i++) {\n            if (numbers[i] > newId) {\n                break;\n            } else {\n                newId++;\n            }\n        }\n        return newId.toString();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
