{
  "version": 3,
  "sources": ["../../src/scheduler/OneTimeTriggerScheduler.ts"],
  "sourcesContent": ["import { Job, JobCallback } from \"node-schedule\";\nimport { LoggingService } from \"../services/LoggingService\";\nimport { OneTimeTrigger } from \"../triggers/OneTimeTrigger\";\nimport { TriggerScheduler } from \"./TriggerScheduler\";\n\nexport class OneTimeTriggerScheduler extends TriggerScheduler {\n    private registered: [OneTimeTrigger, Job][] = [];\n    private triggerTimeout: any;\n\n    constructor(\n        private scheduleJob: (date: Date, callback: JobCallback) => Job,\n        private cancelJob: (job: Job) => boolean,\n        private logger: LoggingService,\n        private adapter: ioBroker.Adapter,\n    ) {\n        super();\n        this.adapter = adapter;\n        this.triggerTimeout = undefined;\n    }\n\n    public forType(): string {\n        return OneTimeTrigger.prototype.constructor.name;\n    }\n\n    public register(trigger: OneTimeTrigger): void {\n        this.logger.logDebug(`Register trigger ${trigger}`);\n        if (this.getAssociatedJob(trigger)) {\n            throw new Error(`Trigger ${trigger} is already registered.`);\n        }\n        if (trigger.getDate() < new Date()) {\n            this.logger.logDebug(`Date is in past, deleting trigger ${trigger}`);\n            this.triggerTimeout = this.adapter.setTimeout(() => {\n                trigger.destroy();\n                this.triggerTimeout = undefined;\n            }, 2000);\n        } else {\n            const newJob = this.scheduleJob(trigger.getDate(), () => {\n                this.logger.logDebug(`Executing trigger ${trigger}`);\n                trigger.getAction().execute();\n            });\n            this.registered.push([trigger, newJob]);\n        }\n    }\n\n    public unregister(trigger: OneTimeTrigger): void {\n        this.logger.logDebug(`Unregister trigger ${trigger}`);\n        const job = this.getAssociatedJob(trigger);\n        if (job) {\n            this.cancelJob(job);\n            this.removeTrigger(trigger);\n        }\n    }\n\n    public destroy(): void {\n        this.triggerTimeout && this.adapter.clearTimeout(this.triggerTimeout);\n        this.registered.forEach((r) => this.unregister(r[0]));\n    }\n\n    private getAssociatedJob(trigger: OneTimeTrigger): Job | null {\n        const entry = this.registered.find((r) => r[0] === trigger);\n        if (entry) {\n            return entry[1];\n        } else {\n            return null;\n        }\n    }\n\n    private removeTrigger(trigger: OneTimeTrigger): void {\n        this.registered = this.registered.filter((r) => r[0] !== trigger);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,4BAA+B;AAC/B,8BAAiC;AAE1B,MAAM,gCAAgC,yCAAiB;AAAA,EAI1D,YACY,aACA,WACA,QACA,SACV;AACE,UAAM;AALE;AACA;AACA;AACA;AAGR,SAAK,UAAU;AACf,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAZQ,aAAsC,CAAC;AAAA,EACvC;AAAA,EAaD,UAAkB;AACrB,WAAO,qCAAe,UAAU,YAAY;AAAA,EAChD;AAAA,EAEO,SAAS,SAA+B;AAC3C,SAAK,OAAO,SAAS,oBAAoB,OAAO,EAAE;AAClD,QAAI,KAAK,iBAAiB,OAAO,GAAG;AAChC,YAAM,IAAI,MAAM,WAAW,OAAO,yBAAyB;AAAA,IAC/D;AACA,QAAI,QAAQ,QAAQ,IAAI,oBAAI,KAAK,GAAG;AAChC,WAAK,OAAO,SAAS,qCAAqC,OAAO,EAAE;AACnE,WAAK,iBAAiB,KAAK,QAAQ,WAAW,MAAM;AAChD,gBAAQ,QAAQ;AAChB,aAAK,iBAAiB;AAAA,MAC1B,GAAG,GAAI;AAAA,IACX,OAAO;AACH,YAAM,SAAS,KAAK,YAAY,QAAQ,QAAQ,GAAG,MAAM;AACrD,aAAK,OAAO,SAAS,qBAAqB,OAAO,EAAE;AACnD,gBAAQ,UAAU,EAAE,QAAQ;AAAA,MAChC,CAAC;AACD,WAAK,WAAW,KAAK,CAAC,SAAS,MAAM,CAAC;AAAA,IAC1C;AAAA,EACJ;AAAA,EAEO,WAAW,SAA+B;AAC7C,SAAK,OAAO,SAAS,sBAAsB,OAAO,EAAE;AACpD,UAAM,MAAM,KAAK,iBAAiB,OAAO;AACzC,QAAI,KAAK;AACL,WAAK,UAAU,GAAG;AAClB,WAAK,cAAc,OAAO;AAAA,IAC9B;AAAA,EACJ;AAAA,EAEO,UAAgB;AACnB,SAAK,kBAAkB,KAAK,QAAQ,aAAa,KAAK,cAAc;AACpE,SAAK,WAAW,QAAQ,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC,CAAC,CAAC;AAAA,EACxD;AAAA,EAEQ,iBAAiB,SAAqC;AAC1D,UAAM,QAAQ,KAAK,WAAW,KAAK,CAAC,MAAM,EAAE,CAAC,MAAM,OAAO;AAC1D,QAAI,OAAO;AACP,aAAO,MAAM,CAAC;AAAA,IAClB,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEQ,cAAc,SAA+B;AACjD,SAAK,aAAa,KAAK,WAAW,OAAO,CAAC,MAAM,EAAE,CAAC,MAAM,OAAO;AAAA,EACpE;AACJ;",
  "names": []
}
