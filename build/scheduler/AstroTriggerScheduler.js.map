{
  "version": 3,
  "sources": ["../../src/scheduler/AstroTriggerScheduler.ts"],
  "sourcesContent": ["import { GetTimesResult } from \"suncalc\";\nimport { Coordinate } from \"../Coordinate\";\nimport { LoggingService } from \"../services/LoggingService\";\nimport { AstroTrigger } from \"../triggers/AstroTrigger\";\nimport { TimeTrigger } from \"../triggers/TimeTrigger\";\nimport { TimeTriggerBuilder } from \"../triggers/TimeTriggerBuilder\";\nimport { AllWeekdays } from \"../triggers/Weekday\";\nimport { TimeTriggerScheduler } from \"./TimeTriggerScheduler\";\nimport { TriggerScheduler } from \"./TriggerScheduler\";\n\nexport class AstroTriggerScheduler extends TriggerScheduler {\n    private registered: AstroTrigger[] = [];\n    private scheduled: [string, TimeTrigger][] = [];\n    private readonly rescheduleTrigger = new TimeTriggerBuilder()\n        .setId(`AstroTriggerScheduler-Rescheduler`)\n        .setWeekdays(AllWeekdays)\n        .setHour(2)\n        .setMinute(0)\n        .setAction({\n            execute: () => {\n                this.logger.logDebug(`Rescheduling astro triggers`);\n                this.scheduled.forEach((s) => this.timeTriggerScheduler.unregister(s[1]));\n                this.registered.forEach((r) => this.tryScheduleTriggerToday(r));\n            },\n        })\n        .build();\n\n    constructor(\n        private readonly timeTriggerScheduler: TimeTriggerScheduler,\n        private readonly getTimes: (date: Date, latitude: number, longitude: number) => GetTimesResult,\n        private readonly coordinate: Coordinate,\n        private readonly logger: LoggingService,\n    ) {\n        super();\n        this.timeTriggerScheduler.register(this.rescheduleTrigger);\n    }\n\n    public register(trigger: AstroTrigger): void {\n        this.logger.logDebug(`Register trigger ${trigger}`);\n        if (this.isRegistered(trigger)) {\n            throw new Error(`Trigger ${trigger} is already registered.`);\n        }\n        this.registered.push(trigger);\n        this.tryScheduleTriggerToday(trigger);\n    }\n\n    public unregister(trigger: AstroTrigger): void {\n        this.logger.logDebug(`Unregister trigger ${trigger}`);\n        if (this.isRegistered(trigger)) {\n            this.registered = this.registered.filter((t) => t.getId() !== trigger.getId());\n            if (this.isScheduledToday(trigger)) {\n                this.scheduled = this.scheduled.filter((s) => {\n                    if (s[0] === trigger.getId()) {\n                        this.timeTriggerScheduler.unregister(s[1]);\n                        return false;\n                    }\n                    return true;\n                });\n            }\n        } else {\n            throw new Error(`Trigger ${trigger} is not registered.`);\n        }\n    }\n\n    public destroy(): void {\n        this.timeTriggerScheduler.destroy();\n        this.registered = [];\n        this.scheduled = [];\n    }\n\n    public forType(): string {\n        return AstroTrigger.prototype.constructor.name;\n    }\n\n    private tryScheduleTriggerToday(trigger: AstroTrigger): void {\n        const now = new Date();\n        const next = this.nextDate(trigger);\n        this.logger.logDebug(`Trying to schedule ${trigger} at ${next} (now is ${now}, day ${now.getDay()})`);\n        if (next >= now && trigger.getWeekdays().includes(now.getDay())) {\n            const timeTrigger = new TimeTriggerBuilder()\n                .setId(`TimeTriggerForAstroTrigger:${trigger.getId()}`)\n                .setHour(next.getHours())\n                .setMinute(next.getMinutes())\n                .setWeekdays([next.getDay()])\n                .setAction({\n                    execute: () => {\n                        this.logger.logDebug(`Executing trigger ${trigger}`);\n                        trigger.getAction().execute();\n                    },\n                })\n                .build();\n            this.logger.logDebug(`Scheduled with ${timeTrigger}`);\n            this.timeTriggerScheduler.register(timeTrigger);\n            this.scheduled.push([trigger.getId(), timeTrigger]);\n        } else {\n            this.logger.logDebug(`Didn't schedule`);\n        }\n    }\n\n    private isRegistered(trigger: AstroTrigger): boolean {\n        return this.registered.find((r) => r.getId() === trigger.getId()) != undefined;\n    }\n\n    private isScheduledToday(trigger: AstroTrigger): boolean {\n        return this.scheduled.find((s) => s[0] === trigger.getId()) != undefined;\n    }\n\n    private nextDate(trigger: AstroTrigger): Date {\n        const next = this.getTimes(new Date(), this.coordinate.getLatitude(), this.coordinate.getLongitude())[\n            trigger.getAstroTime()\n        ];\n        next.setMinutes(next.getMinutes() + trigger.getShiftInMinutes());\n        return next;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
